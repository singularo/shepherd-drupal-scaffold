#!/bin/bash

#
# This file serves as the main entrypoint for development of
# shepherd based projects. It provides a simple bash shell based
# development environment.
#

# `set +e` is used to continue on errors throughout this script.
set -euo pipefail

# Project is used as the prefix for docker networking, container naming and nginx hostname.
# Source the .env file here, the project var is required asap.
if [ -f .env ]; then
  source .env
fi
PROJECT=${PROJECT:-$(basename "${PWD}" | tr -d '.')}
COMPOSER_PROJECT=${PROJECT}
export PROJECT
export COMPOSER_PROJECT

# Work out some other values we need.
HOST_TYPE=$(uname | tr '[:upper:]' '[:lower:]')
COMPOSE_FILE="docker-compose.${HOST_TYPE}.yml"
DOCKER_COMPOSE="docker-compose --ansi never"
SHELL_CONTAINER=web

# Set domain default if its not set.
set +u
if [[ "${HOST_TYPE}" =~ 'darwin' ]]; then
  if [ -z "${DOMAIN}" ]; then
    DOMAIN="127.0.0.1.nip.io"
  fi
  CONTAINER_SSH_AUTH_SOCK=/run/host-services/ssh-auth.sock
  export CONTAINER_SSH_AUTH_SOCK
else
  if [ -z "${DOMAIN}" ]; then
    DOMAIN="172.17.0.1.nip.io"
  fi
  # If ssh is setup, try and add it in.
  if [ -n "${SSH_AUTH_SOCK}" ]; then
    CONTAINER_SSH_AUTH_SOCK=/ssh/$(basename "${SSH_AUTH_SOCK}")
    export CONTAINER_SSH_AUTH_SOCK
  fi
fi
set -u
export DOMAIN

# Set user variables
USER_ID=$(id -u)
export USER_ID
GROUP_ID=$(id -g)
export GROUP_ID

# Setup some functions to output warnings.
notice()  { printf "\e[32;01m%s\e[39;49;00m\n" "$1"; }
warning() { printf "\e[33;01m%s\e[39;49;00m\n" "$1"; }
error()   { printf "\e[31;01m%s\e[39;49;00m\n" "$1"; }

# Ensure required docker file is at least present
if [ ! -f "${COMPOSE_FILE}" ]; then
  # Ultimately permit overriding repo docker-compose.yml with custom file.
  if [ -f docker-compose.yml ]; then
    COMPOSE_FILE='docker-compose.yml'
  else
    error "Unable to locate ${COMPOSE_FILE} in current directory."
    exit
  fi
fi

# Fix for Specifying a compose file breaks override loading.
if [ -f "docker-compose.override.yml" ]; then
  COMPOSE_FILE="${COMPOSE_FILE}:docker-compose.override.yml"
fi
export COMPOSE_FILE

# Ensure script is NOT running inside a container - must be run from host.
if [ -f /.dockerenv ]; then
  error "Inception error - you can't run $0 within a docker container."
  exit
fi

# Add functionality to the dsh setup/start function
setup_nginx() {
  # Check if its running/exists already and start if required.
  if docker ps -a --format "{{.Names}}" | grep nginx-proxy > /dev/null; then
    warning "Restarting nginx proxy"
    docker restart nginx-proxy > /dev/null
  else
    warning "Starting nginx proxy"
    docker run -d -p 8080:80  \
      -v /var/run/docker.sock:/tmp/docker.sock:ro \
      -v ./docker/dsh_proxy.conf:/etc/nginx/conf.d/dsh_proxy.conf \
      --restart always --name nginx-proxy \
      nginxproxy/nginx-proxy:1.3.1
  fi

  if ! docker ps --format "{{.Names}}" --filter "name=^nginx-proxy$" > /dev/null; then
    error "jwilder/nginx-proxy could not be started."
  fi

  set +e
  URL="http://${PROJECT}.${DOMAIN}:8080"
  NGINX_IP=$(docker inspect --format "{{with index .NetworkSettings.Networks \"${PROJECT}_default\"}}{{.IPAddress}}{{end}}" nginx-proxy)
  if [[ ! ${NGINX_IP} =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    notice "Connecting nginx-proxy to the network."
    docker network connect "${PROJECT}_default" nginx-proxy
  fi
  set -e
}

# Add functionality to the dsh stop function
stop_nginx() {
  if docker network ls --format "{{.Name}}" --filter "name=^${PROJECT}_default\$" > /dev/null; then
    notice "Disconnecting nginx proxy from network."
    set +e
    docker network disconnect "${PROJECT}_default" nginx-proxy > /dev/null
    set -e
  fi
}

# Command: ./dsh start
# Configures environment then brings up project using docker-compose.yml file.
dsh_start() {
  if [[ ! $(docker ps --format "{{.Names}}" --filter "name=^${PROJECT}_web") =~ ${PROJECT}_web ]]; then
    notice "Starting containers."
    ${DOCKER_COMPOSE} up -d
    # Too slow to leave in # ${DOCKER_COMPOSE} build --parallel
    if [[ ! $(docker network ls --format "{{.Name}}" --filter "name=^${PROJECT}_default\$") =~ ${PROJECT}_default ]]; then
      notice "Creating network."
      docker network create "${PROJECT}_default"
    fi
    setup_nginx

    URL="http://${PROJECT}.${DOMAIN}:8080"
    set +u
    if [ "$1" != "quiet" ]; then
      notice "Please wait about 10 seconds for the database to settle.
The project is now available at: ${URL}.
Files are available in /code, You may need to 'robo build' to install."
    fi
    set -u
  fi
}

# Command: ./dsh shell
# Connects a shell to the web image as the current user.
dsh_shell() {
  dsh_start

  # Setup docker to run the shell as the current user, thus removing any
  # permission issues.
  EXISTING_USER=$(${DOCKER_COMPOSE} exec ${SHELL_CONTAINER} id -u www-data | sed -e 's/\r//g')
  if [ "${EXISTING_USER}" != "${USER_ID}" ]; then
    if ! ${DOCKER_COMPOSE} exec ${SHELL_CONTAINER} id -u ${USER} >/dev/null 2>&1; then
      notice "Setting up user $USER on web container."
      # Add user with local $USER name to container.
      ${DOCKER_COMPOSE} exec ${SHELL_CONTAINER} adduser --disabled-password --uid ${UID} \
        --gecos ${USER} --home /home/${USER} ${USER} >/dev/null
      # Allow sudo without password for user.
      ${DOCKER_COMPOSE} exec ${SHELL_CONTAINER} /bin/bash -c "echo '${USER} ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/${USER}"
    fi
  else
    USER=www-data
  fi

  # Build an array of options to pass to the container.
  set +u
  options=()
  if [ -n "${DTT_BASE_URL}" ]; then
    options+=("--env DTT_BASE_URL=${DTT_BASE_URL}")
  fi

  if [ -n "${DTT_MINK_DRIVER_ARGS}" ]; then
    options+=("--env DTT_MINK_DRIVER_ARGS=${DTT_MINK_DRIVER_ARGS}")
  fi

  if [ -n "${SIMPLETEST_BASE_URL}" ]; then
    options+=("--env SIMPLETEST_BASE_URL=${SIMPLETEST_BASE_URL}")
  fi

  if [ -n "${SIMPLETEST_DB}" ]; then
    options+=("--env SIMPLETEST_DB=${SIMPLETEST_DB}")
  fi

  if [ -n "${NEWRELIC_ENABLED}" ]; then
    options+=("--env NEWRELIC_ENABLED=${NEWRELIC_ENABLED}")
  fi

  if [ -n "${NEWRELIC_APP}" ]; then
    options+=("--env NEWRELIC_APP=${NEWRELIC_APP}")
  fi

  if [ -n "${NEWRELIC_LICENSE}" ]; then
    options+=("--env NEWRELIC_LICENSE=${NEWRELIC_LICENSE}")
  fi

  if [ -n "${CONTAINER_SSH_AUTH_SOCK}" ]; then
    options+=("--env SSH_AUTH_SOCK=${CONTAINER_SSH_AUTH_SOCK}")
  fi
  set -u

  # These things should always be present.
  options+=("--env PROJECT=${PROJECT}")
  options+=("--env DOMAIN=${DOMAIN}")
  options+=("--env COLUMNS=\"$(tput cols)\"")
  options+=("--env LINES=\"$(tput lines)\"")

  ${DOCKER_COMPOSE} exec \
    -u ${USER} \
    ${options[@]} \
    ${SHELL_CONTAINER} ${@:-./dsh_bash}
}

# Command: ./dsh stop
# Stops project and brings down network after disconnecting nginx proxy.
dsh_stop() {
  notice "Stopping containers."
  stop_nginx
  ${DOCKER_COMPOSE} stop
}

# Command: ./dsh down
# Stops project, then takes down containers and removes volumes if possible.
dsh_down() {
  stop_nginx
  notice "Removing containers."
  ${DOCKER_COMPOSE} down -v
}

# Command: ./dsh purge
# Stops project, then takes down containers, removes volumes and remove dev image.
dsh_purge() {
  dsh_down

  # Get the image lines from the compose files.
  # shellcheck disable=SC2086
  RESULTS=$(grep image ${COMPOSE_FILE//:/ })

  # Set the field separator, then convert the results to an array.
  IFS=$'\n'
  mapfile -t LINES <<< "${RESULTS}"

  # Loop through the array and delete the images.
  for LINE in "${LINES[@]}"
  do
    # Remove the parts of the line we don't need.
    IMAGE=${LINE#*image: }
    docker rmi -f ${IMAGE}
  done
}

# Command: ./dsh status
# Shows status information about project containers.
dsh_status() {
  ${DOCKER_COMPOSE} ps
}

# Command: ./dsh logs
# Tails logs from web container.
dsh_logs() {
  ${DOCKER_COMPOSE} logs -f web
}

# Command: ./dsh pull
# Fetches all images used by the project.
dsh_pull() {
  # docker-compose doesn't resolve sub-dependencies in Dockerfiles.
  docker pull singularo/s2i-shepherd-drupal
  ${DOCKER_COMPOSE} pull --ignore-pull-failures
  ${DOCKER_COMPOSE} build
}

dsh_help() {
  printf "\nUsage: dsh COMMAND\n
Commands:
\t down\tShutdown and destroy the containers.
\t exec\tExecute a command in the container.
\t help\tShow this help.
\t logs\tShow the container logs with tail -f - ctrl-c to exit.
\t pull\tPull the latest container images.
\t purge\tPurge the docker containers, network and proxy and remove all data.
\t shell\tStart a shell which is connected to the containers and can be used to run commands.
\t start\tStart the docker containers, network and proxy.
\t status\tShow the status of this projects containers.
\t stop\tStop the docker containers, network and proxy, but keep data for a re-start.
\nIf no command is given, shell is the default.
Commands can be shortened to their unique component, eg ./dsh sh is the same as ./dsh shell.\n\n"
}

# Set a default command to show usage when no arguments provided.
COMMAND=${1:-default}

case ${COMMAND} in
  dow*)
    dsh_down
    ;;
  e*)
    dsh_shell "${@:2}"
    ;;
  h*|-h|--help)
    dsh_help
    ;;
  l*)
    dsh_logs
    ;;
  pul*)
    dsh_pull
    ;;
  pur*)
    dsh_purge
    ;;
  sh*|ss*)
    dsh_shell "${@:2}"
    ;;
  star*)
    dsh_start
    ;;
  stat*)
    dsh_status
    ;;
  sto*)
    dsh_stop
    ;;
  *)
    warning "Starting shell. For other options try $0 help."
    dsh_shell
    ;;
esac
